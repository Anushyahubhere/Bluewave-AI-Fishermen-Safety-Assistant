# BlueWave AI - Fishermen Safety Assistant (Full Advanced + Multilingual, No Google API)

import streamlit as st
import firebase_admin
from firebase_admin import credentials, firestore, initialize_app
from datetime import datetime
import uuid
import json
import pandas as pd
import requests
from streamlit_lottie import st_lottie
import folium
from streamlit_folium import st_folium

# --- Streamlit Setup ---
st.set_page_config(page_title="BlueWave AI", layout="wide")

# --- Language Selector ---
lang = st.sidebar.selectbox(
    "ЁЯМР Select Language / роорпКро┤ро┐ / р░нр░╛р░╖ / рднрд╛рд╖рд╛",
    ["English", "Hindi", "Tamil", "Telugu"]
)

# --- Translations ---
translations = {
    "title": {
        "English":"ЁЯМК BlueWave AI - Fishermen Safety Assistant",
        "Hindi":"ЁЯМК рдмреНрд▓реВрд╡реЗрд╡ рдПрдЖрдИ - рдордЫреБрдЖрд░реЛрдВ рдХреЗ рд▓рд┐рдП рд╕реБрд░рдХреНрд╖рд╛ рд╕рд╣рд╛рдпрдХ",
        "Tamil":"ЁЯМК рокрпБро│рпВро╡рпЗро╡рпН роП.роР - роорпАройро╡ро░рпНроХро│ро┐ройрпН рокро╛родрпБроХро╛рокрпНрокрпБ роЙродро╡ро┐",
        "Telugu":"ЁЯМК р░мр▒Нр░▓р▒Вр░╡р▒Зр░╡р▒Н р░О.р░Р - р░ор░др▒Нр░╕р▒Нр░пр░Хр░╛р░░р▒Бр░▓ р░нр░жр▒Нр░░р░др░╛ р░╕р░╣р░╛р░пр░Хр▒Бр░бр▒Б"
    },
    "login": {
        "English":"ЁЯФР Login",
        "Hindi":"ЁЯФР рд▓реЙрдЧрд┐рди",
        "Tamil":"ЁЯФР роЙро│рпНроирпБро┤рпИро╡рпБ",
        "Telugu":"ЁЯФР р░▓р░╛р░Чр░┐р░ир▒Н"
    },
    "username": {
        "English":"Username",
        "Hindi":"рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо",
        "Tamil":"рокропройро░рпНрокрпЖропро░рпН",
        "Telugu":"р░╡р░╛р░бр▒Бр░Хр░░р░┐ р░кр▒Зр░░р▒Б"
    },
    "password": {
        "English":"Password",
        "Hindi":"рдкрд╛рд╕рд╡рд░реНрдб",
        "Tamil":"роХроЯро╡рпБроЪрпНроЪрпЖро╛ро▓рпН",
        "Telugu":"р░кр░╛р░╕р▒Нр░╡р░░р▒Нр░бр▒Н"
    },
    "send_sos": {
        "English":"ЁЯЪи Send Emergency SOS",
        "Hindi":"ЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓реАрди SOS рднреЗрдЬреЗрдВ",
        "Tamil":"ЁЯЪи роЕро╡роЪро░ SOS роЕройрпБрокрпНрокрпБ",
        "Telugu":"ЁЯЪи р░Ер░др▒Нр░пр░╡р░╕р░░ SOS р░кр░Вр░кр░Вр░бр░┐"
    },
    "sos_message": {
        "English":"Message",
        "Hindi":"рд╕рдВрджреЗрд╢",
        "Tamil":"роЪрпЖропрпНродро┐",
        "Telugu":"р░╕р░Вр░жр▒Зр░╢р░В"
    },
    "latitude": {
        "English":"Latitude (optional)",
        "Hindi":"рдЕрдХреНрд╖рд╛рдВрд╢ (рд╡реИрдХрд▓реНрдкрд┐рдХ)",
        "Tamil":"роЕроЯрпНроЪро╛роЩрпНро╕рпН (ро╡ро┐ро░рпБрокрпНрокрооро╛ройродрпБ)",
        "Telugu":"р░Ер░Хр▒Нр░╖р░╛р░Вр░╢р░В (р░Рр░Ър▒Нр░Ыр░┐р░Хр░В)"
    },
    "longitude": {
        "English":"Longitude (optional)",
        "Hindi":"рджреЗрд╢рд╛рдВрддрд░ (рд╡реИрдХрд▓реНрдкрд┐рдХ)",
        "Tamil":"роЙропро░рпНроиро┐ро▓рпИ (ро╡ро┐ро░рпБрокрпНрокрооро╛ройродрпБ)",
        "Telugu":"р░░р▒Зр░Цр░╛р░Вр░╢р░В (р░Рр░Ър▒Нр░Ыр░┐р░Хр░В)"
    },
    "alerts": {
        "English":"ЁЯУв Nearby Alerts",
        "Hindi":"ЁЯУв рдкрд╛рд╕ рдХреЗ рдЕрд▓рд░реНрдЯ",
        "Tamil":"ЁЯУв роЕро░рпБроХро┐ро▓рпБро│рпНро│ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН",
        "Telugu":"ЁЯУв р░╕р░ор▒Ар░к р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б"
    },
    "about": {
        "English":"ЁЯМК About BlueWave AI",
        "Hindi":"ЁЯМК рдмреНрд▓реВрд╡реЗрд╡ рдПрдЖрдИ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ",
        "Tamil":"ЁЯМК рокрпБро│рпВро╡рпЗро╡рпН роП.роР рокро▒рпНро▒ро┐",
        "Telugu":"ЁЯМК р░мр▒Нр░▓р▒Вр░╡р▒Зр░╡р▒Н р░О.р░Р р░Чр▒Бр░░р░┐р░Вр░Ър░┐"
    },
    "login_success": {
        "English":"Logged in successfully!",
        "Hindi":"рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд▓реЙрдЧрд┐рди рдХрд┐рдпрд╛ рдЧрдпрд╛!",
        "Tamil":"ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЙро│рпНроирпБро┤рпИроирпНродродрпБ!",
        "Telugu":"р░╡р░┐р░Ьр░пр░╡р░Вр░др░Вр░Чр░╛ р░▓р░╛р░Чр░┐р░ир▒Н р░Ер░пр▒Нр░пр░╛р░░р▒Б!"
    },
    "login_error": {
        "English":"Invalid username or password",
        "Hindi":"рдЕрдорд╛рдиреНрдп рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо рдпрд╛ рдкрд╛рд╕рд╡рд░реНрдб",
        "Tamil":"родро╡ро▒ро╛рой рокропройро░рпНрокрпЖропро░рпН роЕро▓рпНро▓родрпБ роХроЯро╡рпБроЪрпНроЪрпКро▓рпН",
        "Telugu":"р░др░кр▒Нр░кр▒Б р░╡р░╛р░бр▒Бр░Хр░░р░┐ р░кр▒Зр░░р▒Б р░▓р▒Зр░жр░╛ р░кр░╛р░╕р▒Нр░╡р░░р▒Нр░бр▒Н"
    },
    "sos_sent": {
        "English":"SOS Alert Sent!",
        "Hindi":"SOS рдЕрд▓рд░реНрдЯ рднреЗрдЬрд╛ рдЧрдпрд╛!",
        "Tamil":"SOS роОроЪрпНроЪро░ро┐роХрпНроХрпИ роЕройрпБрокрпНрокрокрпНрокроЯрпНроЯродрпБ!",
        "Telugu":"SOS р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Х р░кр░Вр░кр░мр░бр░┐р░Вр░жр░┐!"
    },
    "login_required": {
        "English":"Please login to proceed",
        "Hindi":"рдХреГрдкрдпрд╛ рдЖрдЧреЗ рдмрдврд╝рдиреЗ рдХреЗ рд▓рд┐рдП рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ",
        "Tamil":"родрпКроЯро░ роирпАроЩрпНроХро│рпН роЙро│рпНроирпБро┤рпИропро╡рпБроорпН",
        "Telugu":"р░жр░пр░Ър▒Зр░╕р░┐ р░Хр▒Кр░ир░╕р░╛р░Чр░бр░╛р░ир░┐р░Хр░┐ р░▓р░╛р░Чр░┐р░ир▒Н р░Ер░╡р▒Нр░╡р░Вр░бр░┐"
    },
    "update_location": {
        "English":"Update Location",
        "Hindi":"рд╕реНрдерд╛рди рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ",
        "Tamil":"роЗро░рпБрокрпНрокро┐роЯродрпНродрпИ рокрпБродрпБрокрпНрокро┐роХрпНроХро╡рпБроорпН",
        "Telugu":"р░╕р▒Нр░ер░╛р░ир░В р░ир░╡р▒Ар░Хр░░р░┐р░Вр░Ър░Вр░бр░┐"
    },
    "location_updated": {
        "English":"Location updated",
        "Hindi":"рд╕реНрдерд╛рди рдЕрдкрдбреЗрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛",
        "Tamil":"роЗро░рпБрокрпНрокро┐роЯроорпН рокрпБродрпБрокрпНрокро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ",
        "Telugu":"р░╕р▒Нр░ер░╛р░ир░В р░ир░╡р▒Ар░Хр░░р░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐"
    },
    "weather_advisory": {
        "English":"Weather & Sea Advisory",
        "Hindi":"рдореМрд╕рдо рдФрд░ рд╕рдореБрджреНрд░ рд╕рд▓рд╛рд╣",
        "Tamil":"ро╡ро╛ройро┐ро▓рпИ рооро▒рпНро▒рпБроорпН роХроЯро▓рпН роЖро▓рпЛроЪройрпИ",
        "Telugu":"р░╡р░╛р░др░╛р░╡р░░р░г & р░╕р░ор▒Бр░жр▒Нр░░ р░╕р▒Вр░Ър░ир░▓р▒Б"
    },
    "community_updates": {
        "English":"Community Updates",
        "Hindi":"рд╕рдореБрджрд╛рдп рдЕрдкрдбреЗрдЯреНрд╕",
        "Tamil":"роЪроорпВроХ рокрпБродрпБрокрпНрокро┐рокрпНрокрпБроХро│рпН",
        "Telugu":"р░╕р░ор▒Бр░жр░╛р░п р░ир░╡р▒Ар░Хр░░р░гр░▓р▒Б"
    },
    "ai_prediction": {
        "English":"AI Fish Catch Prediction",
        "Hindi":"рдПрдЖрдИ рдордЫрд▓реА рдкрдХрдбрд╝рдиреЗ рдХреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА",
        "Tamil":"роП.роР роорпАройрпН рокро┐роЯро┐роХрпНроХрпБроорпН роХрогро┐рокрпНрокрпБ",
        "Telugu":"р░Пр░Р р░Ър▒Зр░к р░кр░Яр▒Нр░Яр▒Б р░нр░╡р░┐р░╖р▒Нр░пр░╡р░╛р░гр░┐"
    },
    "upload_json": {
        "English":"Upload JSON file",
        "Hindi":"JSON рдлрд╝рд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
        "Tamil":"JSON роХрпЛрокрпНрокрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН",
        "Telugu":"JSON р░лр▒Ир░▓р▒Н р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐"
    },
    "fishing_trends": {
        "English":"Fishing Trends",
        "Hindi":"рдордЫрд▓реА рдкрдХрдбрд╝рдиреЗ рдХреЗ рд░реБрдЭрд╛рди",
        "Tamil":"роорпАройрпН рокро┐роЯро┐роХрпНроХрпБроорпН рокрпЛроХрпНроХрпБроХро│рпН",
        "Telugu":"р░Ър▒Зр░к р░кр░Яр▒Нр░Яр▒Б р░зр▒Лр░░р░гр▒Бр░▓р▒Б"
    },
    "safe_zone_prediction": {
        "English":"Safe Zone Prediction",
        "Hindi":"рд╕реБрд░рдХреНрд╖рд┐рдд рдХреНрд╖реЗрддреНрд░ рдХреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА",
        "Tamil":"рокро╛родрпБроХро╛рокрпНрокро╛рой рокроХрпБродро┐ роХрогро┐рокрпНрокрпБ",
        "Telugu":"р░╕р▒Бр░░р░Хр▒Нр░╖р░┐р░д р░кр▒Нр░░р░╛р░Вр░др░В р░нр░╡р░┐р░╖р▒Нр░пр░╡р░╛р░гр░┐"
    },
    "safe_routes": {
        "English":"Safe Routes",
        "Hindi":"рд╕реБрд░рдХреНрд╖рд┐рдд рдорд╛рд░реНрдЧ",
        "Tamil":"рокро╛родрпБроХро╛рокрпНрокро╛рой ро╡ро┤ро┐роХро│рпН",
        "Telugu":"р░╕р▒Бр░░р░Хр▒Нр░╖р░┐р░д р░ор░╛р░░р▒Нр░Чр░╛р░▓р▒Б"
    },
    "voice_assistant": {
        "English":"Voice Assistant",
        "Hindi":"рд╡реЙрдЗрд╕ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ",
        "Tamil":"роХрпБро░ро▓рпН роЙродро╡ро┐ропро╛ро│ро░рпН",
        "Telugu":"р░╡р░╛р░пр░┐р░╕р▒Н р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒Н"
    },
    "real_time_location": {
        "English":"ЁЯУН Real-time Location",
        "Hindi":"ЁЯУН рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╕рдордп рд╕реНрдерд╛рди",
        "Tamil":"ЁЯУН роирпЗро░роЯро┐ роЗроЯроорпН",
        "Telugu":"ЁЯУН р░░р░┐р░пр░▓р▒Н-р░Яр▒Ир░ор▒Н р░▓р▒Кр░Хр▒Зр░╖р░ир▒Н"
    }
}

# --- Firebase Setup ---
if not firebase_admin._apps:
    cred = credentials.Certificate(dict(st.secrets["firebase"]))
    initialize_app(cred)
db = firestore.client()

# --- Lottie Loader ---
def load_lottie_url(url):
    try:
        r = requests.get(url)
        if r.status_code == 200:
            return r.json()
    except:
        return None

# --- Browser TTS ---
def speak(text):
    st.components.v1.html(f"""
        <script>
            var msg = new SpeechSynthesisUtterance("{text}");
            window.speechSynthesis.speak(msg);
        </script>
        """, height=0)

# --- Browser Voice Input ---
def get_browser_voice_command():
    st.info("ЁЯОд Enter your command here (simulate voice input)")
    command = st.text_input(translations["voice_assistant"][lang])
    return command.lower() if command else ""

# --- Sidebar Navigation ---
menu = st.sidebar.radio(
    translations["title"][lang],
    [
        translations["login"][lang],
        translations["send_sos"][lang],
        translations["ai_prediction"][lang],
        translations["weather_advisory"][lang],
        translations["community_updates"][lang],
        translations["real_time_location"][lang],
        translations["safe_zone_prediction"][lang],
        translations["voice_assistant"][lang],
        translations["fishing_trends"][lang],
        translations["safe_routes"][lang],
        translations["alerts"][lang],
        translations["about"][lang]
    ]
)
st.sidebar.markdown("---")
st.sidebar.markdown("Made with тЭдя╕П for Fishermen")

# --- Session State ---
if "user" not in st.session_state:
    st.session_state.user = None

# --- LOGIN ---
if menu == translations["login"][lang]:
    st.subheader(translations["login"][lang])
    username = st.text_input(translations["username"][lang])
    password = st.text_input(translations["password"][lang], type="password")
    if st.button(translations["login"][lang]):
        user_ref = db.collection("users").document(username).get()
        if user_ref.exists and user_ref.to_dict().get("password") == password:
            st.session_state.user = username
            st.success(translations["login_success"][lang])
        else:
            st.error(translations["login_error"][lang])

# --- SEND SOS ---
elif menu == translations["send_sos"][lang]:
    st.subheader(translations["send_sos"][lang])
    if st.session_state.user:
        msg = st.text_area(translations["sos_message"][lang])
        lat = st.text_input(translations["latitude"][lang])
        lon = st.text_input(translations["longitude"][lang])
        if st.button(translations["send_sos"][lang]):
            sos_id = str(uuid.uuid4())
            db.collection("sos_alerts").document(sos_id).set({
                "username": st.session_state.user,
                "message": msg,
                "latitude": lat,
                "longitude": lon,
                "timestamp": datetime.utcnow()
            })
            st.success(translations["sos_sent"][lang])
            speak(translations["sos_sent"][lang])
    else:
        st.warning(translations["login_required"][lang])

# --- ALERTS ---
elif menu == translations["alerts"][lang]:
    st.subheader(translations["alerts"][lang])
    if st.session_state.user:
        sos_ref = db.collection("sos_alerts").order_by("timestamp", direction=firestore.Query.DESCENDING).limit(10)
        for doc in sos_ref.stream():
            d = doc.to_dict()
            st.info(f"{d.get('username','Unknown')} at ({d.get('latitude','N/A')}, {d.get('longitude','N/A')}): {d.get('message','No message')}")
    else:
        st.warning(translations["login_required"][lang])

# --- AI Prediction ---
elif menu == translations["ai_prediction"][lang]:
    st.subheader(translations["ai_prediction"][lang])
    uploaded_file = st.file_uploader(translations["upload_json"][lang])
    if uploaded_file:
        data = json.load(uploaded_file)
        score = 0.7
        st.success(f"Predicted Fish Availability Score: {score*100:.1f}%")
        speak(f"Predicted Fish Availability Score {score*100:.1f} percent")

# --- Weather Advisory ---
elif menu == translations["weather_advisory"][lang]:
    st.subheader(translations["weather_advisory"][lang])
    lat = st.number_input(translations["latitude"][lang], value=8.5)
    lon = st.number_input(translations["longitude"][lang], value=78.1)
    st.info(f"Weather advisory for ({lat},{lon})")

# --- Community Updates ---
elif menu == translations["community_updates"][lang]:
    st.subheader(translations["community_updates"][lang])
    updates_ref = db.collection("community_updates").order_by("timestamp", direction=firestore.Query.DESCENDING).limit(5)
    for doc in updates_ref.stream():
        d = doc.to_dict()
        st.write(f"{d.get('username','Unknown')} : {d.get('message','No message')}")

# --- Real-time Location using OpenStreetMap ---
elif menu == translations["real_time_location"][lang]:
    st.subheader(translations["real_time_location"][lang])
    if st.session_state.user:
        lat = st.number_input(translations["latitude"][lang], value=8.5, key="loc_lat")
        lon = st.number_input(translations["longitude"][lang], value=78.1, key="loc_lon")
        if st.button(translations["update_location"][lang]):
            db.collection("locations").document(st.session_state.user).set({
                "username": st.session_state.user,
                "latitude": lat,
                "longitude": lon,
                "timestamp": datetime.utcnow()
            })
            st.success(translations["location_updated"][lang])

        # Folium map
        m = folium.Map(location=[lat, lon], zoom_start=10)
        folium.Marker([lat, lon], tooltip=st.session_state.user).add_to(m)
        st_folium(m, width=800, height=500)
    else:
        st.warning(translations["login_required"][lang])

# --- Safe Zone Prediction ---
elif menu == translations["safe_zone_prediction"][lang]:
    st.subheader(translations["safe_zone_prediction"][lang])
    st.info("Safe zones based on recent SOS and weather data")

# --- Safe Routes ---
elif menu == translations["safe_routes"][lang]:
    st.subheader(translations["safe_routes"][lang])
    st.info("Safe routes between port and fishing zones")

# --- Fishing Trends ---
elif menu == translations["fishing_trends"][lang]:
    st.subheader(translations["fishing_trends"][lang])
    df = pd.DataFrame({"Day":["Mon","Tue","Wed","Thu","Fri"],"Catch Score":[0.7,0.8,0.6,0.9,0.75]})
    st.line_chart(df.set_index("Day")["Catch Score"])

# --- Voice Assistant ---
elif menu == translations["voice_assistant"][lang]:
    st.subheader(translations["voice_assistant"][lang])
    command = get_browser_voice_command()
    if command:
        st.info(f"Command received: {command}")
        speak(f"You said: {command}")

# --- ABOUT ---
elif menu == translations["about"][lang]:
    st.subheader(translations["about"][lang])
    st_lottie(load_lottie_url("https://assets5.lottiefiles.com/packages/lf20_zrqthn6o.json"), height=200)
    st.markdown("""
    BlueWave AI is an advanced assistant platform for fishermen:
    - Send & receive SOS alerts
    - AI-based fish catch prediction
    - Real-time location tracking
    - Weather & sea condition advisories
    - Safe zone & route prediction
    - Community updates & trends
    - Voice assistant commands
    - Fully Cloud-compatible & mobile-friendly
    """)



