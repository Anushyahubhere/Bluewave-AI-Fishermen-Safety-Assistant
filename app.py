
    # BlueWave AI - Fishermen Safety Assistant (Full Features)
import streamlit as st
import firebase_admin
from firebase_admin import credentials, firestore

# Set page config
st.set_page_config(page_title="BlueWave AI - Fishermen Safety Assistant", layout="wide")

# Initialize Firebase only once
if not firebase_admin._apps:
    cred = credentials.Certificate(st.secrets["firebase"])
    firebase_admin.initialize_app(cred)

# Firestore DB
db = firestore.client()



# Session state 



# -------------------- LANG --------------------
lang = st.sidebar.radio("ЁЯМР Language / роорпКро┤ро┐", ["English", "родрооро┐ро┤рпН"])
T = lambda e, t: e if lang == "English" else t

# -------------------- LOGIN --------------------
st.title("ЁЯМК BlueWave AI - Fishermen Safety Assistant")
st.subheader(T("Login", "роЙро│рпН роирпБро┤рпИ"))

username = st.text_input(T("Username", "рокропройро░рпН рокрпЖропро░рпН"))
password = st.text_input(T("Password", "роХроЯро╡рпБроЪрпНроЪрпКро▓рпН"), type="password")
login_btn = st.button(T("Login", "роЙро│рпНроирпБро┤рпИроп"))

user_doc = None
if login_btn:
    users_ref = db.collection("users")
    query = users_ref.where("username", "==", username).where("password", "==", password).stream()
    user_doc = next(query, None)
    if user_doc:
        st.success(T("Login successful тЬЕ", "роЙро│рпН роирпБро┤рпИро╡рпБ ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роорпБроЯро┐роирпНродродрпБ тЬЕ"))
        st.session_state["logged_in"] = True
        st.session_state["user"] = user_doc.to_dict()
    else:
        st.error(T("Invalid credentials тЭМ", "родро╡ро▒ро╛рой рокропройро░рпН ро╡ро┐ро╡ро░роЩрпНроХро│рпН тЭМ"))

# -------------------- MAIN UI --------------------
if st.session_state.get("logged_in"):

    st.markdown("## ЁЯзн Features")
    feature = st.selectbox(
        T("Choose a feature", "роТро░рпБ роЕроорпНроЪродрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН"),
        [
            T("Send SOS Alert", "роЕро╡роЪро░ роОроЪрпНроЪро░ро┐роХрпНроХрпИ роЕройрпБрокрпНрокрпБ"),
            T("View Live Map", "родро▒рпНрокрпЛродрпИроп ро╡ро░рпИрокроЯроорпН"),
            T("View Fish Zones", "роорпАройрпН рокроХрпБродро┐роХро│рпИрокрпН рокро╛ро░рпНроХрпНроХ"),
            T("Safe Route Planning", "рокро╛родрпБроХро╛рокрпНрокро╛рой рокро╛родрпИ родро┐роЯрпНроЯрооро┐роЯро▓рпН"),
            T("Catch Logbook", "роорпАройрпН рокро┐роЯро┐рокрпНрокрпБ рокродро┐ро╡рпЗроЯрпБ"),
            T("Leaderboard", "роорпБройрпНройрогро┐ рокроЯрпНроЯро┐ропро▓рпН"),
            T("Settings", "роЕроорпИрокрпНрокрпБроХро│рпН")
        ]
    )

    # 1. SOS Alert
    if feature.startswith("Send SOS") or feature.startswith("роЕро╡роЪро░"):
        st.warning(T("тЪая╕П Send emergency alert with current GPS.", "тЪая╕П родро▒рпНрокрпЛродрпИроп роЗроЯродрпНродрпБроЯройрпН роЕро╡роЪро░ роОроЪрпНроЪро░ро┐роХрпНроХрпИ роЕройрпБрокрпНрокро╡рпБроорпН"))
        lat = st.number_input("Latitude", format="%.6f")
        lon = st.number_input("Longitude", format="%.6f")
        sos_btn = st.button("ЁЯУб Send SOS")
        if sos_btn:
            db.collection("sos").add({
                "username": username,
                "location": firestore.GeoPoint(lat, lon),
                "timestamp": datetime.utcnow(),
                "id": str(uuid.uuid4())
            })
            st.success(T("ЁЯЪи SOS Sent!", "ЁЯЪи роЕро╡роЪро░ роОроЪрпНроЪро░ро┐роХрпНроХрпИ роЕройрпБрокрпНрокрокрпНрокроЯрпНроЯродрпБ!"))

    # 2. Live Map
    elif feature.startswith("View Live Map") or feature.startswith("родро▒рпНрокрпЛродрпИроп"):
        st.info("ЁЯМН " + T("Live SOS locations map", "роирпЗро░роЯро┐ SOS роЗроЯроЩрпНроХро│рпН ро╡ро░рпИрокроЯроорпН"))
        sos_docs = db.collection("sos").stream()
        for doc in sos_docs:
            data = doc.to_dict()
            try:
                lat, lon = data["location"].latitude, data["location"].longitude
                st.write(f"ЁЯУН {data['username']} at ({lat}, {lon})")
                st.map([{"lat": lat, "lon": lon}])
            except Exception as e:
                st.warning(f"Skipped a faulty location: {e}")

    # 3. Fish Zones (mocked overlay)
    elif feature.startswith("View Fish Zones") or feature.startswith("роорпАройрпН"):
        st.success(T("ЁЯЧ║я╕П Fish Catch Zones Overlaid", "ЁЯЧ║я╕П роорпАройрпН рокро┐роЯро┐рокрпНрокрпБ рокроХрпБродро┐роХро│рпН роХро╛роЯрпНроЯрокрпНрокроЯрпНроЯрпБро│рпНро│рой"))
        st.image("https://i.imgur.com/FishZones.png", caption="Fish Zone Overlay (Example)", use_column_width=True)

    # 4. Route Planning
    elif feature.startswith("Safe Route") or feature.startswith("рокро╛родрпБроХро╛рокрпНрокро╛рой"):
        st.info("ЁЯзн " + T("Plan your safe return path.", "рокро╛родрпБроХро╛рокрпНрокро╛рой родро┐ро░рпБроорпНрокрпБроорпН рокро╛родрпИропрпИ родро┐роЯрпНроЯрооро┐роЯрпБроЩрпНроХро│рпН."))
        st.text_input("Start Location")
        st.text_input("Destination")
        st.button("ЁЯЪд Plot Route")

    # 5. Logbook
    elif feature.startswith("Catch Logbook") or feature.startswith("рокро┐роЯро┐рокрпНрокрпБ"):
        st.text_input("Fish Type")
        st.number_input("Weight (kg)", min_value=0.0)
        st.date_input("Catch Date")
        st.button("ЁЯУЭ Log Catch")

    # 6. Leaderboard
    elif feature.startswith("Leaderboard") or feature.startswith("роорпБройрпНройрогро┐"):
        st.balloons()
        st.write("ЁЯПЖ Leaderboard coming soon!")

    # 7. Settings
    elif feature.startswith("Settings") or feature.startswith("роЕроорпИрокрпНрокрпБроХро│рпН"):
        st.toggle("Enable Notifications")
        st.toggle("Dark Mode")
        st.selectbox("Language", ["English", "родрооро┐ро┤рпН"])

# -------------------- END --------------------
st.markdown("---")
st.caption("Built with тЭдя╕П for Fishermen - BlueWave AI")
